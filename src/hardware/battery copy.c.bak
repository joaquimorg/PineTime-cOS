#include <stdint.h>
#include <stdio.h>
#include <math.h>

#include "battery.h"
#include "pinetime_board.h"
#include "sys.h"

#include "nrf.h"
#include "nrf_drv_saadc.h"
#include "app_error.h"
#include "nrf_delay.h"
#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"


#define ADC_REF_VOLTAGE_IN_MILLIVOLTS  600  //!< Reference voltage (in milli volts) used by ADC while doing conversion.
#define ADC_RES_10BIT                  1024 //!< Maximum digital value for 10-bit ADC conversion.
#define ADC_PRE_SCALING_COMPENSATION   6    //!< The ADC is configured to use VDD with 1/3 prescaling as input. And hence the result of conversion is to be multiplied by 3 to get the actual value of the battery voltage.
#define ADC_RESULT_IN_MILLI_VOLTS(ADC_VALUE) \
    ((((ADC_VALUE) * ADC_REF_VOLTAGE_IN_MILLIVOLTS) / ADC_RES_10BIT) * ADC_PRE_SCALING_COMPENSATION)

#define VIN_MEAS_R26 1000 + 50  // 1000kOhm +- 5% + error correction
#define VIN_MEAS_R35 1000       // 1000kOhm +- 5%

nrf_saadc_value_t buffer[1];

#define VOLTAGE_DIVISIONS 21 
static const float generic_lipo[VOLTAGE_DIVISIONS] = 
    { 3.27, 3.61, 3.69, 3.71, 3.73, 3.75, 3.77, 3.79, 3.8, 3.82, 3.84, 3.85, 3.87, 3.91, 3.95, 3.98, 4.02, 4.08, 4.11, 4.15, 4.2 }; // Voltage


static int charge_at_index (int i) {
    return i*5;
}

static int voltage_percentage(float battery_voltage) {
    int i = 0;

    if (generic_lipo[0] > battery_voltage) return 0; // voltage below charts

    while (i < VOLTAGE_DIVISIONS) {
      if (generic_lipo[i] < battery_voltage) i++;
      else {
        // Scanner found the correct
        float m = (charge_at_index(i) - charge_at_index(i-1))/(generic_lipo[i] - generic_lipo[i-1]);
        float c = charge_at_index(i) - (m * generic_lipo[i]);

        return (int)(battery_voltage * m + c);
      }
    }

    return 100; // Voltage over chart
}


static void saadc_callback(nrf_drv_saadc_evt_t const * p_event) {

    if (p_event->type == NRF_DRV_SAADC_EVT_DONE) {

        nrf_saadc_value_t adc_result = 0;

        nrf_drv_saadc_buffer_convert(p_event->data.done.p_buffer, 1);
        
		adc_result = p_event->data.done.p_buffer[0];

        // Voltage divider ratio
		//(R26 + R35) / R35
		uint16_t value = (VIN_MEAS_R26 + VIN_MEAS_R35) * adc_result / VIN_MEAS_R35;

        pinetimecos.batteryVoltage = ADC_RESULT_IN_MILLI_VOLTS(value);

        pinetimecos.batteryPercentRemaining = voltage_percentage((float)pinetimecos.batteryVoltage / 1000);
        
        nrf_drv_saadc_uninit();
		NRF_SAADC->INTENCLR = (SAADC_INTENCLR_END_Clear << SAADC_INTENCLR_END_Pos);
		NVIC_ClearPendingIRQ(SAADC_IRQn);
        
    }
}

void battery_init(void) {
    NRF_SAADC->INTENCLR = (SAADC_INTENCLR_END_Clear << SAADC_INTENCLR_END_Pos);
	NVIC_ClearPendingIRQ(SAADC_IRQn);
}

static void saadc_init(void) {

    ret_code_t err_code = nrf_drv_saadc_init(NULL, saadc_callback);
    APP_ERROR_CHECK(err_code);
    
    nrf_saadc_channel_config_t channel_config =
        NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE(BATTERY_VOL);    

    err_code = nrf_drv_saadc_channel_init(0, &channel_config);
    APP_ERROR_CHECK(err_code);

    err_code = nrf_drv_saadc_buffer_convert(buffer, 1);
	APP_ERROR_CHECK(err_code);

	// Enable burst mode
	NRF_SAADC->CH[0].CONFIG |= 0x01000000;

}




void battery_read(void) {
    if (!nrf_drv_saadc_is_busy()) {
        saadc_init();
        nrf_drv_saadc_sample();
    } else {
        pinetimecos.batteryPercentRemaining = -2;
    }
}

char * battery_get_icon(void) {
    if (pinetimecos.batteryPercentRemaining == -1) return "\xEE\xA4\x87";
    if (pinetimecos.batteryPercentRemaining > 80) return "\xEE\xA4\xA0";
    if (pinetimecos.batteryPercentRemaining > 60) return "\xEE\xA4\xA1";
    if (pinetimecos.batteryPercentRemaining > 40) return "\xEE\xA4\xA2";
    if (pinetimecos.batteryPercentRemaining > 20) return "\xEE\xA4\xA3";
    return "\xEE\xA4\xA4";
}